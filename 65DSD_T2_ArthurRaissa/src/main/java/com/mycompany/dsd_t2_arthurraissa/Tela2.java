/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dsd_t2_arthurraissa;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;

public class Tela2 extends javax.swing.JFrame {

    private JTable table = null;

    public Tela2() {
        setTitle("Matriz a partir de Arquivo");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600, 600);

        // Lendo os dados do arquivo e construindo a matriz
        String[][] data = readDataFromFile("/home/warley/Desktop/Arthur/1_2024/65DSD/malha-exemplo-2.txt");

        // Criando a tabela
        if (data != null) {
            table = new JTable(data.length, data[0].length);
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data[0].length; j++) {
                    table.setValueAt(data[i][j], i, j);
                }
            }

            // Definindo um renderizador de célula personalizado para a tabela
            table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                @Override
                public java.awt.Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {
                    java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    String cellText = (value == null) ? "" : value.toString();

                    System.out.println(cellComponent.toString());
                    // Define o fundo da célula na linha 2 e coluna 2 como amarelo
                    switch (cellText) {
                        case "0":
                            cellComponent.setBackground(Color.WHITE);
                            break;
                        case "1":
                            cellComponent.setBackground(Color.BLUE);
                            break;
                        case "2":
                            cellComponent.setBackground(Color.GREEN);
                            break;
                        case "3":
                            cellComponent.setBackground(Color.LIGHT_GRAY);
                            break;
                        case "4":
                            cellComponent.setBackground(Color.RED);
                            break;
                        default:
                            cellComponent.setBackground(Color.DARK_GRAY);
                            break;
                    }
                    return cellComponent; // Retorna o componente da célula

                }
            });

            // Adicionando a tabela em um JScrollPane e colocando-o no JFrame
            JScrollPane scrollPane = new JScrollPane(table);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } else {
            System.out.println("Não foi possível ler os dados do arquivo.");
        }
    }

    private String[][] readDataFromFile(String filename) {
        String[][] data = null;

        try {
            File file = new File(filename);
            Scanner scanner = new Scanner(file);

            int rows = scanner.nextInt();
            int cols = scanner.nextInt();
            scanner.nextLine(); // Para consumir a quebra de linha após a segunda linha de metadados
            data = new String[rows][cols];

            for (int i = 0; i < rows; i++) {
                String[] line = scanner.nextLine().trim().split("\\s+"); // Dividir a linha em espaços em branco
                for (int j = 0; j < cols; j++) {
                    data[i][j] = line[j];
                }
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return data;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Tela2 example = new Tela2();
            example.setVisible(true);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
